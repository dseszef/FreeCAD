from PIL import Image
import os

dir_path = os.path.dirname(os.path.realpath(__file__))
'''Try to use as smaller image as you can'''
img = Image.open(dir_path+"/images/smallmap.png", "r")
pix = img.load()

##get height and width
imgWidth = img.size[0]
imgHeight = img.size[1]
print("pixel size. width: "+str(imgWidth)+", height: "+str(imgHeight))

#Get a list of tuples, a tuple shows the pixel data for 1 pixel moving from left to righ as we descend
lst = list(img.getdata())
print("lst length: "+str(len(lst)))
#Shape params
'''we will plot a shape ever x pixels as long as that pixel is populated with the colour of the sea '''
pixelSpacing = 2
holeSize = 2
positionX = 0
positionY = 0
colourToIgnore = (0)

for y in range(0, imgHeight, pixelSpacing):
  positionY = pixelSpacing * y
  for x in range(0, imgWidth, pixelSpacing):
    positionX = pixelSpacing * x
    pixelIdx = x + imgWidth * y
	#compare the tuple. Note that you will have to change this depending on the amount of colour channels an / or colour to ignore       
    if (lst[pixelIdx] == colourToIgnore): 
      continue
    print ("x: "+str(x)+", y: "+str(y)+", pixel tuple["+str(pixelIdx)+"]: "+str(lst[pixelIdx]))
    App.ActiveDocument.Sketch.addGeometry(Part.Circle(App.Vector(positionX,positionY,0),App.Vector(0,0,1),holeSize/2),False)
App.activeDocument().recompute()